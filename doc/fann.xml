<!-- To compile this file, use
 jw -b html -o html fann.xml
 -->
<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "docbook/xml-dtd-4.1.2/docbookx.dtd">
<book>
 <bookinfo id="bookinfo">
  <title>Fast Artificial Neural Network Library</title>
  <authorgroup id="authors">
   <author>
    <firstname>Steffen</firstname>
    <surname>Nissen</surname>
   </author>
   <author>
    <firstname>Evan</firstname>
    <surname>Nemerson</surname>
   </author>
  </authorgroup>
  <copyright>
   <year>2004</year>
  </copyright>
 </bookinfo>

 <chapter id="intro">
  <title>Introduction</title>
  <para>
   fann - Fast Artificial Neural Network Library is written in ANSI C. The
   library implements multilayer feedforward ANNs, up to 150 times faster
   than other libraries. FANN supports execution in fixed point, for fast
   execution on systems like the iPAQ.
  </para>

  <section id="intro.install">
   <title>Installation</title>

   <section id="intro.install.rpm">
    <title>RPMs</title>
    <para>
     RPMs are a simple way to manage packages, and is used on many common
     Linux distributions such as <ulink url="http://www.redhat.com">Red Hat</ulink>
     and <ulink url="http://www.mandrake.com/">Mandrake</ulink>.
    </para>
    <para>
     After downloading FANN, simply run (as root) the following command:
     <command>rpm -ivh $PATH_TO_RPM</command>
    </para>
   </section>

   <section id="intro.install.deb">
    <title>DEBs</title>
    <para>
     Dunno- never used dpkg. Steffen?
    </para>
   </section>

   <section id="intro.install.win32">
    <title>Windows</title>
    <para>
     Instructions for Borland & VC++
    </para>
   </section>

   <section id="intro.install.src">
    <title>Compiling from source</title>
    <para>
     Compiling FANN from source code entails the standard GNU autotools technique. First,
     configure the package as you want it by typing (in the FANN directory), <command>
     ./configure</command> If you need help choosing the options you would like to use,
     try <command>./configure --help</command>
    </para>
    <para>
     Next, you have to actually compile the library. To do this, simply type <command>make
     </command>
    </para>
    <para>
     Finally, to install the library, type <command>make install</command> Odds are you will
     have to be root to install, so you may need to <command>su</command> to root before installing.
     Please remember to log out of the root account immediately after <command>make install
     </command> finishes.
    </para>
   </section>
  </section>

  <section id="intro.start">
   <title>Getting Started</title>
   <para>
    An ANN is normally run in two different modes, a training mode and an execution mode.
    Although it is possible to do this in the same program, I will recommend doing it in two
    different programs.
   </para>
   <para>
    There are several reasons to why it is usually a good idea to write the training and
    execution in two different programs, but the most obvious is the fact that a typical ANN
    system is only trained once, while it is executed many times.
   </para>
   <section id="intro.start.train">
    <title>Training</title>
    <para>
     The following is a simple program which trains an ANN with a data set and then saves the
     ANN to a file.
     <example>
      <title>Simple training example</title>
      <programlisting>
<![CDATA[
#include "fann.h"

int main()
{
	const float connection_rate = 1;
	const float learning_rate = 0.7;
	const unsigned int num_input = 2;
	const unsigned int num_output = 1;
	const unsigned int num_layers = 3;
	const unsigned int num_neurons_hidden = 4;
	const float desired_error = 0.0001;
	const unsigned int max_iterations = 500000;
	const unsigned int iterations_between_reports = 1000;

	struct fann *ann = fann_create(connection_rate, learning_rate, num_layers,
		num_input, num_neurons_hidden, num_output);
	
	fann_train_on_file(ann, "xor.data", max_iterations,
		iterations_between_reports, desired_error);
	
	fann_save(ann, "xor_float.net");
	
	fann_destroy(ann);

	return 0;
}
]]>
      </programlisting>
     </example>
    </para>
    <para>
     The file xor.data, used to train the xor function:
     <literallayout>
4 2 1
0 0
0
0 1
1
1 0
1
1 1
0
     </literallayout>The first line consists of three numbers:
     The first is the number of training pairs in the file, the
     second is the number of inputs and the third is the number
     of outputs. The rest of the file is the actual training data,
     consisting of one line with inputs, one with outputs etc.
    </para>
    <para>
     TODO: Link up functions to API reference.
    </para>
   </section>

   <section id="intro.start.execution">
    <title>Execution</title>
    <para>
     The following example shows a simple program which executes a single
     input on the ANN. The program introduces two new functions which were
     not used in the traiining procedure, as well as the fann_type type.
     <example>
      <title>Simple training example</title>
      <programlisting>
<![CDATA[
#include <stdio.h>
#include "floatfann.h"

int main()
{
	fann_type *calc_out;
	fann_type input[2];

	struct fann *ann = fann_create_from_file("xor_float.net");
	
	input[0] = 0;
	input[1] = 1;
	calc_out = fann_run(ann, input);

	printf("xor test (%f,%f) -> %f\n",
		input[0], input[1], *calc_out);
	
	fann_destroy(ann);
	return 0;
}
]]>
      </programlisting>
     </example>
    </para>
   </section>
  </section>
 </chapter>

 <chapter>
  <title>Artificial Neural Networks</title>
  <para>A short introduction to Artificial Neural Networks</para>

  <section>
   <title>Training</title>
  </section>
 </chapter>

 <chapter id="api">
  <title>API Reference</title>
  <para>
   This is a list of all functions in FANN.
  </para>

  <section id="api.sec.create_destroy">
   <title>Creation and Destruction</title>

   <refentry id="api.fann_create">
    <refnamediv>
     <refname>fann_create</refname>
     <refpurpose>Save an artificial neural network to a file.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>struct fann *</type><methodname>fann_create</methodname>
       <methodparam><type>float</type><parameter>connection_rate</parameter></methodparam>
       <methodparam><type>float</type><parameter>learning_rate</parameter></methodparam>
       <methodparam><type>unsigned int</type><parameter>num_layers</parameter></methodparam>
       <methodparam><type>unsigned int</type><parameter>...</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_create</function> will create a new artificial neural network, and return
      a pointer to it.
     </para>
    </refsect1>
   </refentry>

   <refentry id="api.fann_create_array">
    <refnamediv>
     <refname>fann_create_array</refname>
     <refpurpose>Save an artificial neural network to a file.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>struct fann *</type><methodname>fann_create_array</methodname>
       <methodparam><type>float</type><parameter>connection_rate</parameter></methodparam>
       <methodparam><type>float</type><parameter>learning_rate</parameter></methodparam>
       <methodparam><type>unsigned int</type><parameter>num_layers</parameter></methodparam>
       <methodparam><type>unsigned int *</type><parameter>neurons_per_layer</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_create_array</function> will create a new artificial neural network, and return
      a pointer to it. It is the same as <function>fann_create</function>, only it accepts an array
      as its final parameter instead of variable arguments.
     </para>
    </refsect1>
   </refentry>

   <refentry id="api.fann_destroy">
    <refnamediv>
     <refname>fann_destroy</refname>
     <refpurpose>Destroy an ANN.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>void</type><methodname>fann_destroy</methodname>
       <methodparam><type>struct fann *</type><parameter>ann</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_destroy</function> will destroy an artificial neural network, properly
      freeing all associated memory.
     </para>
    </refsect1>
   </refentry>

   <refentry id="api.fann_run">
    <refnamediv>
     <refname>fann_run</refname>
     <refpurpose>Run an ANN.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>fann_type *</type><methodname>fann_run</methodname>
       <methodparam><type>struct fann *</type><parameter>ann</parameter></methodparam>
       <methodparam><type>fann_type *</type><parameter>input</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_run</function> will run <parameter>input</parameter> through
      <parameter>ann</parameter>, returning an array of outputs, the number of which
      being equal to the number of neurons in the output layer.
     </para>
    </refsect1>
   </refentry>
  </section>

  <section id="api.sec.io">
   <title>Input/Output</title>

   <refentry id="api.fann_save">
    <refnamediv>
     <refname>fann_save</refname>
     <refpurpose>Save an ANN to a file.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>void</type><methodname>fann_save</methodname>
       <methodparam><type>struct fann *</type><parameter>ann</parameter></methodparam>
       <methodparam><type>const char *</type><parameter>configuration_file</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_save</function> will attempt to save <parameter>ann</parameter>
      to the file located at <parameter>configuration_file</parameter>
     </para>
    </refsect1>
   </refentry>

   <refentry id="api.fann_save_to_fixed">
    <refnamediv>
     <refname>fann_save_to_fixed</refname>
     <refpurpose>Save an ANN to a fixed-point file.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>void</type><methodname>fann_save_to_fixed</methodname>
       <methodparam><type>struct fann *</type><parameter>ann</parameter></methodparam>
       <methodparam><type>const char *</type><parameter>configuration_file</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_save_fixed</function> will attempt to save <parameter>ann</parameter>
      to the file located at <parameter>configuration_file</parameter> as a fixed-point netowrk.
     </para>
    </refsect1>
   </refentry>

   <refentry id="api.fann_create_from_file">
    <refnamediv>
     <refname>fann_create_from_file</refname>
     <refpurpose>Load an ANN from a file..</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>struct fann *</type><methodname>fann_create_from_file</methodname>
       <methodparam><type>const char *</type><parameter>configuration_file</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_create_from_file</function> will attempt to load an artificial neural netowrk
      from a file.
     </para>
    </refsect1>
   </refentry>
  </section>

  <section id="api.sec.train_algo">
   <title>Training Algorithms</title>
  </section>

  <section id="api.sec.train_data">
   <title>Training Data</title>
  </section>

  <section id="api.sec.options">
   <title>Options</title>
  </section>

  <section id="api.sec.errors">
   <title>Error Handling</title>
  </section>

  <section>
   <title>Internal Functions</title>
   <section id="api.sec.create_destroy.internal">
    <title>Creation And Destruction</title>
    <refentry id="api.fann_allocate_structure">
     <refnamediv>
      <refname>fann_allocate_structure</refname>
      <refpurpose>Allocate the core elements of a <type>struct fann</type>.</refpurpose>
     </refnamediv>
     <refsect1>
      <title>Description</title>
       <methodsynopsis>
        <type>struct fann *</type><methodname>fann_allocate_structure</methodname>
        <methodparam><type>float</type><parameter>learning_rate</parameter></methodparam>
        <methodparam><type>unsigned int</type><parameter>num_layers</parameter></methodparam>
       </methodsynopsis>
      <para>
       <function>fann_allocate_structure</function> is used internally to create a
       <type>struct fann</type>.
      </para>
     </refsect1>
    </refentry>
   </section>

   <section id="api.sec.io.internal">
    <title>Input/Output</title>
    <refentry id="api.fann_save_internal">
     <refnamediv>
     <refname>fann_save_internal</refname>
      <refpurpose>Save an ANN to a file.</refpurpose>
     </refnamediv>
     <refsect1>
      <title>Description</title>
       <methodsynopsis>
        <type>int</type><methodname>fann_save_internal</methodname>
        <methodparam><type>struct fann *</type><parameter>ann</parameter></methodparam>
        <methodparam><type>const char *</type><parameter>configuration_file</parameter></methodparam>
       <methodparam><type>unsigned int</type><parameter>save_as_fixed</parameter></methodparam>
       </methodsynopsis>
      <para>
       <function>fann_allocate_structure</function> is used internally to create a
       <type>struct fann</type>.
     </para>
     </refsect1>
    </refentry>
   </section>
  </section>
 </chapter>

 <chapter id="php">
  <title>PHP Extension</title>
  <para>
   These functions allow you to interact with the FANN library from PHP.
  </para>
  <para>
   This extension requires the
   <ulink url="http://fann.sf.net/">FANN</ulink> library,
   version 1.0.6 or later.
  </para>
  <para>
   The following activation functions are supported:
   <itemizedlist>
    <listitem><simpara>FANN_SIGMOID</simpara></listitem>
    <listitem><simpara>FANN_THRESHOLD</simpara></listitem>
    <listitem><simpara>FANN_SIGMOID_STEPWISE</simpara></listitem>
   </itemizedlist>
  </para>

  <section id="php.api">
   <title>API Reference</title>
   <refentry id="function.fann_create">
    <refnamediv>
     <refname>fann_create</refname>
     <refpurpose>Creates an artificial neural network.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>mixed</type><methodname>fann_create</methodname>
       <methodparam><type>array</type><parameter>data</parameter></methodparam>
       <methodparam choice="opt"><type>float</type><parameter>connection_rate</parameter></methodparam>
       <methodparam choice="opt"><type>float</type><parameter>learning_rate</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_create</function> will create an artificial neural
      network using the data given.
     </para>
     <para>
      If the first parameter is an array, <function>fann_create</function>
      will use the data and structure of the array, as well as
      <parameter>connection_rate</parameter> and
      <parameter>learning_rate</parameter>.
     </para>
     <para>
      If <function>fann_create</function> is called with a sole string argument,
      it will attempt to load an ANN created with <function>fann_save</function>
      from the file at <parameter>filename</parameter>.
     </para>
     <para>
      <function>fann_create</function> will return the artificial neural network
      on success, or FALSE if it fails.
     </para>
     <para>
      <example>
       <title><function>fann_create</function> from scratch</title>
       <programlisting role="php">
<![CDATA[
<?php
$ann = fann_create(
  /* Layers. In this case, three layers-
   * two input neurons, 4 neurons on a
   * hidden layer, and one output neuron. */
  array(2, 4, 1),
  1.0,
  0.7);
?>
]]>
       </programlisting>
      </example>
     </para>
     <para>
      <example>
       <title><function>fann_create</function> loading from a file</title>
       <programlisting role="php">
<![CDATA[
<?php
$ann = fann_create("http://www.example.com/ann.net");
);
?>
]]>
       </programlisting>
      </example>
     </para>
     <para>
      See also <function>fann_save</function>.
     </para>
    </refsect1>
   </refentry>

   <refentry id="function.fann_train">
    <refnamediv>
     <refname>fann_train</refname>
     <refpurpose>Train an artificial neural network.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>bool</type><methodname>fann_train</methodname>
       <methodparam><type>resource</type><parameter>ann</parameter></methodparam>
       <methodparam><type>mixed</type><parameter>data</parameter></methodparam>
       <methodparam><type>int</type><parameter>max_iterations</parameter></methodparam>
       <methodparam><type>double</type><parameter>desired_error</parameter></methodparam>
       <methodparam choice="opt"><type>int</type><parameter>iterations_between_reports</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_train</function> will train <parameter>ann</parameter> on
      the data supplied, returning TRUE on success or FALSE on failure.
     </para>
     <para>
      Resources is anrtificial neural network returned by <function>fann_create</function>.
     </para>
     <para>
      <parameter>data</parameter> must be either an array of training data, or
      the URI of a properly formatted training file.
     </para>
     <para>
      <function>fann_train</function> will continue training until
      <parameter>desired_error</parameter> is reached, or
      <parameter>max_iterations</parameter> is exceeded.
     </para>
     <para>
      If <parameter>iterations_between_reports</parameter> is set,
      <function>fann_create</function> will output a short progress
      report every <parameter>iterations_between_reports</parameter>.
      Default is 0 (meaning no reports).
     </para>
     <para>
      <example>
       <title><function>fann_create</function> from training data</title>
       <programlisting role="php">
<![CDATA[
<?php
$ann = fann_create(array(2, 4, 1), 1.0, 0.7);
if ( fann_train($ann,
	   array(
		 array(
		       array(0,0), /* Input(s) */
		       array(0) /* Output(s) */
		       ),
		 array(
		       array(0,1), /* Input(s) */
		       array(1) /* Output(s) */
		       ),
		 array(
		       array(1,0), /* Input(s) */
		       array(1) /* Output(s) */
		       ),
		 array(array(1,1), /* Input(s) */
		       array(0) /* Output(s) */
		       )
		 ),
	   100000,
	   0.00001,
	   1000) == FALSE) {
  exit('Could not train $ann.');
}
?>
]]>
       </programlisting>
      </example>
     </para>
    </refsect1>
   </refentry>

   <refentry id="function.fann_save">
    <refnamediv>
     <refname>fann_save</refname>
     <refpurpose>Save an artificial neural network to a file.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>bool</type><methodname>fann_save</methodname>
       <methodparam><type>resource</type><parameter>ann</parameter></methodparam>
       <methodparam><type>string</type><parameter>filename</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_save</function> will save <parameter>ann</parameter> to
      <parameter>filename</parameter>, returning TRUE on success or FALSE on failure.
     </para>
     <para>
      See also <function>fann_create</function>.
     </para>
    </refsect1>
   </refentry>

   <refentry id="function.fann_run">
    <refnamediv>
     <refname>fann_run</refname>
     <refpurpose>Run an artificial neural network.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>mixed</type><methodname>fann_run</methodname>
       <methodparam><type>resource</type><parameter>ann</parameter></methodparam>
       <methodparam><type>array</type><parameter>input</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_run</function> will run <parameter>input</parameter> through
      <parameter>ann</parameter>, returning an an ouput array on success or FALSE
      on failure.
     </para>
     <para>
      <example>
       <title><function>fann_run</function> Example</title>
       <programlisting role="php">
<![CDATA[
<?php
if ( ($ann = fann_create("http://www.example.com/ann.net")) == FALSE )
  exit("Could not create ANN.");
if ( fann_train($ann, "http://www.example.com/train.data", 100000, 0.00001) == FALSE )
  exit("Could not train ANN.");

if ( ($output = fann_run($ann, array(0, 1))) == FALSE )
  exit("Could not run ANN.");
else
  print_r($output);
?>
]]>
       </programlisting>
      </example>
     </para>
    </refsect1>
   </refentry>

   <refentry id="function.fann_randomize_weights">
    <refnamediv>
     <refname>fann_randomize_weights</refname>
     <refpurpose>Randomize the weights of the neurons in the network.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>void</type><methodname>fann_save</methodname>
       <methodparam><type>resource</type><parameter>ann</parameter></methodparam>
       <methodparam choice="opt"><type>float</type><parameter>minimum</parameter></methodparam>
       <methodparam choice="opt"><type>float</type><parameter>maximum</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_randomize_weights</function> will randomize the weights of all neurons in
      <parameter>ann</parameter>, effectively resetting the network.
     </para>
    </refsect1>
   </refentry>

   <refentry id="function.fann_get_MSE">
    <refnamediv>
     <refname>fann_get_MSE</refname>
     <refpurpose>Get the mean squared error.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>float</type><methodname>fann_get_MSE</methodname>
       <methodparam><type>resource</type><parameter>ann</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_get_MSE</function> will return the mean squared error (MSE) of
      <parameter>ann</parameter>, or 0 if it is unavailable.
     </para>
    </refsect1>
   </refentry>

   <refentry id="function.fann_get_num_input">
    <refnamediv>
     <refname>fann_get_num_input</refname>
     <refpurpose>Get the number of input neurons.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>int</type><methodname>fann_get_num_input</methodname>
       <methodparam><type>resource</type><parameter>ann</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_get_num_input</function> will return the number of input neurons in
      <parameter>ann</parameter>.
     </para>
     <para>
      See also <function>fann_get_num_output</function>, <function>fann_get_total_neurons</function>.
     </para>
    </refsect1>
   </refentry>

   <refentry id="function.fann_get_num_output">
    <refnamediv>
     <refname>fann_get_num_output</refname>
     <refpurpose>Get the number of output neurons.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>int</type><methodname>fann_get_num_output</methodname>
       <methodparam><type>resource</type><parameter>ann</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_get_num_output</function> will return the number of output neurons in
      <parameter>ann</parameter>.
     </para>
     <para>
      See also <function>fann_get_num_input</function>, <function>fann_get_total_neurons</function>.
     </para>
    </refsect1>
   </refentry>

   <refentry id="function.fann_get_total_neurons">
    <refnamediv>
     <refname>fann_get_total_neurons</refname>
     <refpurpose>Get the total number of neurons.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>int</type><methodname>fann_get_total_neurons</methodname>
       <methodparam><type>resource</type><parameter>ann</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_get_total_neurons</function> will return the total number of neurons in
      <parameter>ann</parameter>.
     </para>
     <para>
      See also <function>fann_get_num_input</function>, <function>fann_get_num_output</function>.
     </para>
    </refsect1>
   </refentry>

   <refentry id="function.fann_get_total_connections">
    <refnamediv>
     <refname>fann_get_total_connections</refname>
     <refpurpose>Get the total number of connections.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>int</type><methodname>fann_get_total_connections</methodname>
       <methodparam><type>resource</type><parameter>ann</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_get_total_connections</function> will return the total number of connections in
      <parameter>ann</parameter>.
     </para>
    </refsect1>
   </refentry>

   <refentry id="function.fann_get_learning_rate">
    <refnamediv>
     <refname>fann_get_learning_rate</refname>
     <refpurpose>Get the learning rate.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>float</type><methodname>fann_get_learning_rate</methodname>
       <methodparam><type>resource</type><parameter>ann</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_get_learning_rate</function> will return the learning rate of
      <parameter>ann</parameter>.
     </para>
     <para>
      See also <function>fann_set_learning_rate</function>.
     </para>
    </refsect1>
   </refentry>

   <refentry id="function.fann_get_activation_function_hidden">
    <refnamediv>
     <refname>fann_get_activation_function_hidden</refname>
     <refpurpose>Get the activation function of the hidden neurons.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>int</type><methodname>fann_get_activation_function_hidden</methodname>
       <methodparam><type>resource</type><parameter>ann</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_get_activation_function_hidden</function> will return the activation function
      for the hidden neurons in <parameter>ann</parameter>.
     </para>
     <para>
      See also <function>fann_set_activation_function_hidden</function>.
     </para>
    </refsect1>
   </refentry>

   <refentry id="function.fann_get_activation_function_output">
    <refnamediv>
     <refname>fann_get_activation_function_output</refname>
     <refpurpose>Get the activation function of the output neurons.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>int</type><methodname>fann_get_activation_function_output</methodname>
       <methodparam><type>resource</type><parameter>ann</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_get_activation_function_output</function> will return the activation function
      for the output neurons in <parameter>ann</parameter>.
     </para>
     <para>
      See also <function>fann_set_activation_function_output</function>.
     </para>
    </refsect1>
   </refentry>

   <refentry id="function.fann_get_activation_hidden_steepness">
    <refnamediv>
     <refname>fann_get_activation_hidden_steepness</refname>
     <refpurpose>Get the steepness of the activation function for the hidden neurons.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>float</type><methodname>fann_get_activation_hidden_steepness</methodname>
       <methodparam><type>resource</type><parameter>ann</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_get_activation_hidden_steepness</function> will return the steepness of the
      activation function for the hidden neurons in <parameter>ann</parameter>.
     </para>
     <para>
      See also <function>fann_set_activation_function_hidden_steepness</function>.
     </para>
    </refsect1>
   </refentry>

   <refentry id="function.fann_get_activation_output_steepness">
    <refnamediv>
     <refname>fann_get_activation_output_steepness</refname>
     <refpurpose>Get the steepness of the activation function for the output neurons.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>float</type><methodname>fann_get_activation_output_steepness</methodname>
       <methodparam><type>resource</type><parameter>ann</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_get_activation_output_steepness</function> will return the steepness of the
      activation function for the output neurons in <parameter>ann</parameter>.
     </para>
     <para>
      See also <function>fann_set_activation_output_steepness</function>.
     </para>
    </refsect1>
   </refentry>

   <refentry id="function.fann_set_learning_rate">
    <refnamediv>
     <refname>fann_set_learning_rate</refname>
     <refpurpose>Set the learning rate.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>float</type><methodname>fann_set_learning_rate</methodname>
       <methodparam><type>resource</type><parameter>ann</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_set_learning_rate</function> will return the learning rate of
      <parameter>ann</parameter>.
     </para>
     <para>
      See also <function>fann_set_learning_rate</function>.
     </para>
    </refsect1>
   </refentry>

   <refentry id="function.fann_set_activation_function_hidden">
    <refnamediv>
     <refname>fann_set_activation_function_hidden</refname>
     <refpurpose>Set the activation function for the hidden neurons.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>void</type><methodname>fann_set_activation_function_hidden</methodname>
       <methodparam><type>resource</type><parameter>ann</parameter></methodparam>
       <methodparam><type>int</type><parameter>activation_function</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_set_activation_function_hidden</function> sets the activation function
      for the hidden neurons to <parameter>activation_function</parameter>, which must be one
      of the supported activation functions.
     </para>
     <para>
      See also <function>fann_get_activation_function_hidden</function>.
     </para>
    </refsect1>
   </refentry>

   <refentry id="function.fann_set_activation_function_output">
    <refnamediv>
     <refname>fann_set_activation_function_output</refname>
     <refpurpose>Set the activation function for the output neurons.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>void</type><methodname>fann_set_activation_function_output</methodname>
       <methodparam><type>resource</type><parameter>ann</parameter></methodparam>
       <methodparam><type>int</type><parameter>activation_function</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_set_activation_function_output</function> sets the activation function
      for the output neurons to <parameter>activation_function</parameter>, which must be one
      of the supported activation functions.
     </para>
     <para>
      See also <function>fann_get_activation_function_output</function>.
     </para>
    </refsect1>
   </refentry>

   <refentry id="function.fann_set_activation_hidden_steepness">
    <refnamediv>
     <refname>fann_set_activation_hidden_steepness</refname>
     <refpurpose>Set the steepness of the activation function for the hidden neurons.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
      <methodsynopsis>
       <type>void</type><methodname>fann_set_activation_hidden_steepness</methodname>
       <methodparam><type>resource</type><parameter>ann</parameter></methodparam>
       <methodparam><type>float</type><parameter>steepness</parameter></methodparam>
      </methodsynopsis>
     <para>
      <function>fann_set_activation_hidden_steepness</function> sets the steepness of the
      activation function hidden neurons to <parameter>steepness</parameter>.
     </para>
     <para>
      See also <function>fann_get_activation_hidden_steepness</function>.
     </para>
    </refsect1>
   </refentry>

   <refentry id="function.fann_set_activation_output_steepness">
    <refnamediv>
     <refname>fann_set_activation_output_steepness</refname>
     <refpurpose>Set the steepness of the activation function for the output neurons.</refpurpose>
    </refnamediv>
    <refsect1>
     <title>Description</title>
     <methodsynopsis>
      <type>void</type><methodname>fann_set_activation_output_steepness</methodname>
      <methodparam><type>resource</type><parameter>ann</parameter></methodparam>
      <methodparam><type>float</type><parameter>steepness</parameter></methodparam>
     </methodsynopsis>
     <para>
      <function>fann_set_activation_output_steepness</function> sets the steepness of the
      activation function output neurons to <parameter>steepness</parameter>.
     </para>
     <para>
      See also <function>fann_get_activation_output_steepness</function>.
     </para>
    </refsect1>
   </refentry>
  </section>
 </chapter>
</book>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

