* Implement cascade correlation.
* Implement SuperSAB
* Implement the activation functions defined in fann_activation.h
* More checks to see if train data is properly formatted in the file (some have experienced nasty problems because a number was missing in one line).
* C++ wrapper.
* COM Component.
* Wrappers for other languages.
* Implement optimal brain damage.
* Write GTK+ interface
* Allow recurrent networks.

If you want to contribute to the library, please contact me at lukesky@diku.dk

Things TODO when releasing a new version (mostly for fann developers)

* No compile warnings
	cd examples
	make compiletest

* Everything should compile and install ok
	./configure && make
	su
	make install
	exit
	cd examples
	make runtest

* All of the examples should work fine
	cd examples
	make simple_train && ./simple_train
	make simple_test && ./simple_test
	make steepness_train && ./steepness_train
	make mushroom && ./mushroom
	make robot && ./robot

* No memory leaks must exist
	cd examples
	make rundebug

* Documentation should be updated

* Benchmarks should be updated

* Python bindings should compile and run
	cd python
	make
	python simple_train.py

* Changelog should be updated and timestamp should be set

* PHP Extension should be up-to-date (including documentation)

* TGZ/BZ/ZIP packages should be created

* Debian packages should be created (from tgz package)
	#Example of make command
	rm -rf fann-1.2.0.* test && mkdir test && make dist && cp fann-1.2.0.*gz test && cd test && tar xvzf *gz && cd fann-1.2.0 
	su
	pbuilder update --distribution sid
	pdebuild --distribution sid
	exit
	cd .. && cp /var/cache/pbuilder/result/*deb . && lintian *deb

* Windows DLL's should be created

* ZIP package with win dll should be created

* RPM packages should be created

* Commit for CVS

* CVS branch for release

* Upload to sf

* Update sf site documentation etc.

* Update fm site

* Send out release info
